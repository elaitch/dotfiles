# HG changeset patch
# Parent 07bce02526a24d7ee0048ad68a2975c65239e054

diff -r 07bce02526a2 config.def.h
--- a/config.def.h	Thu Sep 13 10:18:58 2012 +1200
+++ b/config.def.h	Mon Sep 17 14:50:13 2012 +1200
@@ -56,6 +56,7 @@
 	{ "[F]",      NULL },    /* no layout function means floating behavior */
 	{ "[S]",      bstack},
 	{ "[M]",      monocle },
+	{ "[@]",      spiral },
 };
 
 /* key definitions */
@@ -117,6 +118,7 @@
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_s,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[3]} },
+	{ MODKEY,                       XK_g,      setlayout,      {.v = &layouts[4]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
diff -r 07bce02526a2 dwm.c
--- a/dwm.c	Thu Sep 13 10:18:58 2012 +1200
+++ b/dwm.c	Mon Sep 17 14:50:13 2012 +1200
@@ -261,6 +261,7 @@
 static void cycle(const Arg *arg);
 static int shifttag(int dist);
 static void tagcycle(const Arg *arg);
+static void spiral(Monitor *mon);
 
 /* variables */
 static const char broken[] = "broken";
@@ -2322,6 +2323,70 @@
    view(&a);
 }
 
+void
+fibonacci(Monitor *mon, int s) {
+	unsigned int i, n, nx, ny, nw, nh;
+	Client *c;
+
+	for(n = 0, 
+	c = nexttiled(mon->clients); 
+	c; c = nexttiled(c->next), n++);
+	if(n == 0)
+		return;
+	
+	nx = mon->wx;
+	ny = 0;
+	nw = mon->ww;
+	nh = mon->wh;
+	
+	for(i = 0, c = nexttiled(mon->clients); c; c = nexttiled(c->next)) {
+		if((i % 2 && nh / 2 > 2 * c->bw)
+		   || (!(i % 2) && nw / 2 > 2 * c->bw)) {
+			if(i < n - 1) {
+				if(i % 2)
+					nh /= 2;
+				else
+					nw /= 2;
+				if((i % 4) == 2 && !s)
+					nx += nw;
+				else if((i % 4) == 3 && !s)
+					ny += nh;
+			}
+			if((i % 4) == 0) {
+				if(s)
+					ny += nh;
+				else
+					ny -= nh;
+			}
+			else if((i % 4) == 1)
+				nx += nw;
+			else if((i % 4) == 2)
+				ny += nh;
+			else if((i % 4) == 3) {
+				if(s)
+					nx += nw;
+				else
+					nx -= nw;
+			}
+			if(i == 0)
+			{
+				if(n != 1)
+					nw = mon->ww * mon->mfact;
+				ny = mon->wy;
+			}
+			else if(i == 1)
+				nw = mon->ww - nw;
+			i++;
+		}
+		resize(c, nx, ny, nw - 2 * c->bw, nh - 2 * c->bw, False);
+	}
+}
+
+void
+spiral(Monitor *mon) {
+	fibonacci(mon, 1);
+}
+
 int
 main(int argc, char *argv[]) {
 	if(argc == 2 && !strcmp("-v", argv[1]))
